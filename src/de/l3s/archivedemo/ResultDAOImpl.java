// Generated by DB Solo 4.3 on 23.08.2014 at 14:58:58
package de.l3s.archivedemo;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import de.l3s.polibook.entities.Result;
import de.l3s.polibook.entities.ResultPrimeryKey;

public class ResultDAOImpl
{
    //
    // static data
    //
    protected static List<String> pkColumns = new ArrayList<String>();
    protected static List<String> stdColumns = new ArrayList<String>();
    protected static List<String> allColumns = new ArrayList<String>();
    protected static String tableName = "pw_result";

    static
    {
	pkColumns.add("query_id");
	pkColumns.add("rank");
	stdColumns.add("title");
	stdColumns.add("description");
	stdColumns.add("url");
	allColumns.addAll(pkColumns);
	allColumns.addAll(stdColumns);
    }

    //
    // data
    //
    protected Connection conn = null;

    //
    // construction
    //
    public ResultDAOImpl()
    {
	this(null);
    }

    public ResultDAOImpl(Connection conn)
    {
	this.conn = conn;
    }

    //
    // CRUD methods
    //
    public Result getByPrimaryKey(ResultPrimeryKey id) throws DAOException
    {
	PreparedStatement ps = null;
	ResultSet rs = null;

	try
	{
	    int pos = 1;
	    ps = getConn().prepareStatement(DBUtil.select(tableName, allColumns, pkColumns));
	    DBUtil.bind(ps, pos++, id.getQueryId());
	    DBUtil.bind(ps, pos++, id.getRank());
	    rs = ps.executeQuery();

	    if(rs.next())
	    {
		return fromResultSet(rs);
	    }
	}
	catch(SQLException e)
	{
	    throw new DAOException(e);
	}
	finally
	{
	    DBUtil.close(ps, rs);
	}

	return null;
    }

    public long selectCount() throws DAOException
    {
	PreparedStatement ps = null;
	ResultSet rs = null;

	try
	{
	    ps = getConn().prepareStatement("select count(*) from " + tableName);
	    rs = ps.executeQuery();

	    if(rs.next())
	    {
		return rs.getLong(1);
	    }
	}
	catch(SQLException e)
	{
	    throw new DAOException(e);
	}
	finally
	{
	    DBUtil.close(ps, rs);
	}

	return 0;
    }

    public long selectCount(String whereStatement, Object[] bindVariables) throws DAOException
    {
	PreparedStatement ps = null;
	ResultSet rs = null;

	if(!whereStatement.trim().toUpperCase().startsWith("WHERE"))
	{
	    whereStatement = " WHERE " + whereStatement;
	}
	else if(whereStatement.startsWith(" ") == false)
	{
	    whereStatement = " " + whereStatement;
	}

	try
	{
	    ps = getConn().prepareStatement("select count(*) from " + tableName + whereStatement);

	    for(int i = 0; i < bindVariables.length; i++)
		DBUtil.bind(ps, i + 1, bindVariables[i]);

	    rs = ps.executeQuery();

	    if(rs.next())
	    {
		return rs.getLong(1);
	    }
	}
	catch(SQLException e)
	{
	    throw new DAOException(e);
	}
	finally
	{
	    DBUtil.close(ps, rs);
	}

	return 0;
    }

    public List selectAll() throws DAOException
    {
	List ret = new ArrayList();
	PreparedStatement ps = null;
	ResultSet rs = null;

	try
	{
	    ps = getConn().prepareStatement(DBUtil.select(tableName, allColumns));
	    rs = ps.executeQuery();

	    while(rs.next())
		ret.add(fromResultSet(rs));
	}
	catch(SQLException e)
	{
	    throw new DAOException(e);
	}
	finally
	{
	    DBUtil.close(ps, rs);
	}

	return ret;
    }

    public List select(String whereStatement, Object[] bindVariables) throws DAOException
    {
	List ret = new ArrayList();
	PreparedStatement ps = null;
	ResultSet rs = null;

	if(!whereStatement.trim().toUpperCase().startsWith("WHERE"))
	{
	    whereStatement = " WHERE " + whereStatement;
	}
	else if(whereStatement.startsWith(" ") == false)
	{
	    whereStatement = " " + whereStatement;
	}

	try
	{
	    ps = getConn().prepareStatement(DBUtil.select(tableName, allColumns) + whereStatement);

	    for(int i = 0; i < bindVariables.length; i++)
		DBUtil.bind(ps, i + 1, bindVariables[i]);

	    rs = ps.executeQuery();

	    while(rs.next())
		ret.add(fromResultSet(rs));
	}
	catch(SQLException e)
	{
	    throw new DAOException("Error in select(), table = " + tableName, e);
	}
	finally
	{
	    DBUtil.close(ps, rs);
	}

	return ret;
    }

    public int update(Result obj) throws DAOException
    {
	PreparedStatement ps = null;
	int pos = 1;

	try
	{
	    ps = getConn().prepareStatement(DBUtil.update(tableName, stdColumns, pkColumns));
	    pos = bindStdColumns(ps, obj, pos);
	    bindPrimaryKey(ps, obj, pos);

	    int rowCount = ps.executeUpdate();

	    if(rowCount != 1)
	    {
		throw new DAOException("Error updating " + obj.getClass() + " in " + tableName + ", affected rows = " + rowCount);
	    }

	    return rowCount;
	}
	catch(SQLException e)
	{
	    throw new DAOException(e);
	}
	finally
	{
	    DBUtil.close(ps, null);
	}
    }

    public int insert(Result obj) throws DAOException
    {
	PreparedStatement ps = null;
	int pos = 1;

	try
	{
	    ps = getConn().prepareStatement(DBUtil.insert(tableName, pkColumns, stdColumns, true)); // insert delayed
	    pos = bindPrimaryKey(ps, obj, pos);
	    bindStdColumns(ps, obj, pos);

	    int rowCount = ps.executeUpdate();

	    if(rowCount != 1)
	    {
		throw new DAOException("Error inserting " + obj.getClass() + " in " + tableName + ", affected rows = " + rowCount);
	    }

	    return rowCount;
	}
	catch(SQLException e)
	{
	    throw new DAOException(e);
	}
	finally
	{
	    DBUtil.close(ps, null);
	}
    }

    public int delete(Result obj) throws DAOException
    {
	PreparedStatement ps = null;

	try
	{
	    ps = getConn().prepareStatement(DBUtil.delete(tableName, pkColumns));
	    bindPrimaryKey(ps, obj, 1);

	    int rowCount = ps.executeUpdate();

	    if(rowCount != 1)
	    {
		throw new DAOException("Error deleting " + obj.getClass() + " in " + tableName + ", affected rows = " + rowCount);
	    }

	    return rowCount;
	}
	catch(SQLException e)
	{
	    throw new DAOException(e);
	}
	finally
	{
	    DBUtil.close(ps, null);
	}
    }

    //
    // finders
    //
    public List<Result> getByQueryId(int queryId, int limit) throws DAOException
    {
	PreparedStatement ps = null;
	ResultSet rs = null;
	List<Result> ret = new ArrayList<Result>();

	try
	{
	    ps = getConn().prepareStatement(DBUtil.select(tableName, allColumns, Arrays.asList(new String[] { "query_id" })) + " AND rank <= " + limit + " ORDER BY rank");
	    DBUtil.bind(ps, 1, queryId);
	    rs = ps.executeQuery();

	    while(rs.next())
		ret.add(fromResultSet(rs));
	}
	catch(SQLException e)
	{
	    throw new DAOException("SQL Error in finder getByQueryId()", e);
	}
	finally
	{
	    DBUtil.close(ps, rs);
	}

	return ret;
    }

    public List getByRank(int rank) throws DAOException
    {
	PreparedStatement ps = null;
	ResultSet rs = null;
	List ret = new ArrayList();

	try
	{
	    ps = getConn().prepareStatement(DBUtil.select(tableName, allColumns, Arrays.asList(new String[] { "rank" })));
	    DBUtil.bind(ps, 1, rank);
	    rs = ps.executeQuery();

	    while(rs.next())
		ret.add(fromResultSet(rs));
	}
	catch(SQLException e)
	{
	    throw new DAOException("SQL Error in finder getByRank()", e);
	}
	finally
	{
	    DBUtil.close(ps, rs);
	}

	return ret;
    }

    public List getByResultId(String resultId) throws DAOException
    {
	PreparedStatement ps = null;
	ResultSet rs = null;
	List ret = new ArrayList();

	try
	{
	    if(null == resultId)
	    {
		ps = getConn().prepareStatement(DBUtil.selectNull(tableName, allColumns, Arrays.asList(new String[] { "result_id" })));
	    }
	    else
	    {
		ps = getConn().prepareStatement(DBUtil.select(tableName, allColumns, Arrays.asList(new String[] { "result_id" })));
		DBUtil.bind(ps, 1, resultId);
	    }

	    rs = ps.executeQuery();

	    while(rs.next())
		ret.add(fromResultSet(rs));
	}
	catch(SQLException e)
	{
	    throw new DAOException(e);
	}
	finally
	{
	    DBUtil.close(ps, rs);
	}

	return ret;
    }

    public List getByTitle(String title) throws DAOException
    {
	PreparedStatement ps = null;
	ResultSet rs = null;
	List ret = new ArrayList();

	try
	{
	    if(null == title)
	    {
		ps = getConn().prepareStatement(DBUtil.selectNull(tableName, allColumns, Arrays.asList(new String[] { "title" })));
	    }
	    else
	    {
		ps = getConn().prepareStatement(DBUtil.select(tableName, allColumns, Arrays.asList(new String[] { "title" })));
		DBUtil.bind(ps, 1, title);
	    }

	    rs = ps.executeQuery();

	    while(rs.next())
		ret.add(fromResultSet(rs));
	}
	catch(SQLException e)
	{
	    throw new DAOException(e);
	}
	finally
	{
	    DBUtil.close(ps, rs);
	}

	return ret;
    }

    public List getByDescription(String description) throws DAOException
    {
	PreparedStatement ps = null;
	ResultSet rs = null;
	List ret = new ArrayList();

	try
	{
	    if(null == description)
	    {
		ps = getConn().prepareStatement(DBUtil.selectNull(tableName, allColumns, Arrays.asList(new String[] { "description" })));
	    }
	    else
	    {
		ps = getConn().prepareStatement(DBUtil.select(tableName, allColumns, Arrays.asList(new String[] { "description" })));
		DBUtil.bind(ps, 1, description);
	    }

	    rs = ps.executeQuery();

	    while(rs.next())
		ret.add(fromResultSet(rs));
	}
	catch(SQLException e)
	{
	    throw new DAOException(e);
	}
	finally
	{
	    DBUtil.close(ps, rs);
	}

	return ret;
    }

    public List getByUrl(String url) throws DAOException
    {
	PreparedStatement ps = null;
	ResultSet rs = null;
	List ret = new ArrayList();

	try
	{
	    if(null == url)
	    {
		ps = getConn().prepareStatement(DBUtil.selectNull(tableName, allColumns, Arrays.asList(new String[] { "url" })));
	    }
	    else
	    {
		ps = getConn().prepareStatement(DBUtil.select(tableName, allColumns, Arrays.asList(new String[] { "url" })));
		DBUtil.bind(ps, 1, url);
	    }

	    rs = ps.executeQuery();

	    while(rs.next())
		ret.add(fromResultSet(rs));
	}
	catch(SQLException e)
	{
	    throw new DAOException(e);
	}
	finally
	{
	    DBUtil.close(ps, rs);
	}

	return ret;
    }

    //
    // helpers
    //
    protected int bindPrimaryKey(PreparedStatement ps, Result obj, int pos) throws SQLException
    {
	DBUtil.bind(ps, pos++, obj.getPrimeryKey().getQueryId());
	DBUtil.bind(ps, pos++, obj.getPrimeryKey().getRank());

	return pos;
    }

    protected int bindStdColumns(PreparedStatement ps, Result obj, int pos) throws SQLException
    {
	DBUtil.bind(ps, pos++, obj.getTitle());
	DBUtil.bind(ps, pos++, obj.getDescription());
	DBUtil.bind(ps, pos++, obj.getUrl());

	return pos;
    }

    protected Result fromResultSet(ResultSet rs) throws SQLException
    {
	Result obj = new Result();

	obj.setPrimaryKey(getId(rs));
	obj.setTitle(DBUtil.getString(rs, "title"));
	obj.setDescription(DBUtil.getString(rs, "description"));
	obj.setUrl(DBUtil.getString(rs, "url"));

	return obj;
    }

    protected ResultPrimeryKey getId(ResultSet rs) throws SQLException
    {
	ResultPrimeryKey obj = new ResultPrimeryKey();

	obj.setQueryId(DBUtil.getInt(rs, "query_id"));
	obj.setRank(DBUtil.getInt(rs, "rank"));

	return obj;
    }

    protected Connection getConn()
    {
	return (conn == null) ? DBUtil.getConnection() : conn;
    }
}
