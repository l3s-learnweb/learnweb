// Generated by DB Solo 4.3 on 23.08.2014 at 14:58:58
package de.l3s.archivedemo;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import org.apache.log4j.Logger;

public class QueryDAOImpl
{
    private final static Logger log = Logger.getLogger(QueryDAOImpl.class);
    //
    // static data
    //
    protected static List<String> pkColumns = new ArrayList<String>();
    protected static List<String> stdColumns = new ArrayList<String>();
    protected static List<String> allColumns = new ArrayList<String>();
    protected static String tableName = "pw_query";

    static
    {
	pkColumns.add("query_id");
	stdColumns.add("query_string");
	stdColumns.add("results");
	stdColumns.add("loaded_results");
	stdColumns.add("requested_results");
	stdColumns.add("timestamp");
	stdColumns.add("type");
	stdColumns.add("market");
	stdColumns.add("disable_query_alteration");

	allColumns.addAll(pkColumns);
	allColumns.addAll(stdColumns);
    }

    //
    // data
    //
    protected Connection conn = null;

    //
    // construction
    //
    public QueryDAOImpl()
    {
	this(null);
    }

    public QueryDAOImpl(Connection conn)
    {
	this.conn = conn;
    }

    //
    // CRUD methods
    //
    public Query getByPrimaryKey(int queryId) throws DAOException
    {
	PreparedStatement ps = null;
	ResultSet rs = null;

	try
	{
	    int pos = 1;
	    ps = getConn().prepareStatement(DBUtil.select(tableName, allColumns, pkColumns));
	    DBUtil.bind(ps, pos++, queryId);
	    rs = ps.executeQuery();

	    if(rs.next())
	    {
		return fromResultSet(rs);
	    }
	}
	catch(SQLException e)
	{
	    throw new DAOException(e);
	}
	finally
	{
	    DBUtil.close(ps, rs);
	}

	return null;
    }

    public long selectCount() throws DAOException
    {
	PreparedStatement ps = null;
	ResultSet rs = null;

	try
	{
	    ps = getConn().prepareStatement("select count(*) from " + tableName);
	    rs = ps.executeQuery();

	    if(rs.next())
	    {
		return rs.getLong(1);
	    }
	}
	catch(SQLException e)
	{
	    throw new DAOException(e);
	}
	finally
	{
	    DBUtil.close(ps, rs);
	}

	return 0;
    }

    /**
     * Checks if a query with the same person1Id, person2Id and patternId exists
     * 
     * @param query
     * @return
     * @throws DAOException
     */
    public List<Query> getCachedQueries(Query query) throws DAOException
    {

	return select("requested_results >= ? AND query_string = ? AND loaded_results >= 0 and market = ? ORDER BY timestamp DESC limit 1", query.getRequestedResultCount(), query.getQueryString(), query.getMarket());

    }

    public Query getCachedQuery(Query query) throws DAOException
    {
	List<Query> cachedQueries = DAOFactory.getQueryDAO().getCachedQueries(query);

	if(cachedQueries.size() == 0)
	{
	    return null;
	}

	Query cachedQuery = cachedQueries.get(0);
	cachedQuery.setRequestedResultCount(query.getRequestedResultCount());

	return cachedQuery; // return newest query

    }

    public long selectCount(String whereStatement, Object[] bindVariables) throws DAOException
    {
	PreparedStatement ps = null;
	ResultSet rs = null;

	if(!whereStatement.trim().toUpperCase().startsWith("WHERE"))
	{
	    whereStatement = " WHERE " + whereStatement;
	}
	else if(whereStatement.startsWith(" ") == false)
	{
	    whereStatement = " " + whereStatement;
	}

	try
	{
	    ps = getConn().prepareStatement("select count(*) from " + tableName + whereStatement);

	    for(int i = 0; i < bindVariables.length; i++)
		DBUtil.bind(ps, i + 1, bindVariables[i]);

	    rs = ps.executeQuery();

	    if(rs.next())
	    {
		return rs.getLong(1);
	    }
	}
	catch(SQLException e)
	{
	    throw new DAOException(e);
	}
	finally
	{
	    DBUtil.close(ps, rs);
	}

	return 0;
    }

    public List selectAll() throws DAOException
    {
	List ret = new ArrayList();
	PreparedStatement ps = null;
	ResultSet rs = null;

	try
	{
	    ps = getConn().prepareStatement(DBUtil.select(tableName, allColumns));
	    rs = ps.executeQuery();

	    while(rs.next())
		ret.add(fromResultSet(rs));
	}
	catch(SQLException e)
	{
	    throw new DAOException(e);
	}
	finally
	{
	    DBUtil.close(ps, rs);
	}

	return ret;
    }

    public List<Query> select(String whereStatement, Object... bindVariables) throws DAOException
    {
	List<Query> ret = new ArrayList<Query>();
	PreparedStatement ps = null;
	ResultSet rs = null;

	if(!whereStatement.trim().toUpperCase().startsWith("WHERE"))
	{
	    whereStatement = " WHERE " + whereStatement;
	}
	else if(whereStatement.startsWith(" ") == false)
	{
	    whereStatement = " " + whereStatement;
	}

	try
	{
	    ps = getConn().prepareStatement(DBUtil.select(tableName, allColumns) + whereStatement);

	    for(int i = 0; i < bindVariables.length; i++)
		DBUtil.bind(ps, i + 1, bindVariables[i]);
	    rs = ps.executeQuery();

	    while(rs.next())
		ret.add(fromResultSet(rs));
	}
	catch(SQLException e)
	{
	    throw new DAOException("Error in select(), table = " + tableName, e);
	}
	finally
	{
	    DBUtil.close(ps, rs);
	}

	return ret;
    }

    public List select(String selectStatement) throws DAOException
    {
	List ret = new ArrayList();
	PreparedStatement ps = null;
	ResultSet rs = null;

	try
	{
	    ps = getConn().prepareStatement(selectStatement);

	    rs = ps.executeQuery();

	    while(rs.next())
		ret.add(fromResultSet(rs));
	}
	catch(SQLException e)
	{
	    throw new DAOException("Error in select(), table = " + tableName, e);
	}
	finally
	{
	    DBUtil.close(ps, rs);
	}

	return ret;
    }

    public int update(Query obj) throws DAOException
    {
	PreparedStatement ps = null;
	int pos = 1;

	try
	{
	    ps = getConn().prepareStatement(DBUtil.update(tableName, stdColumns, pkColumns));
	    pos = bindStdColumns(ps, obj, pos);
	    bindPrimaryKey(ps, obj, pos);

	    int rowCount = ps.executeUpdate();

	    if(rowCount != 1)
	    {
		throw new DAOException("Error updating " + obj.getClass() + " in " + tableName + ", affected rows = " + rowCount);
	    }

	    return rowCount;
	}
	catch(SQLException e)
	{
	    throw new DAOException(e);
	}
	finally
	{
	    DBUtil.close(ps, null);
	}
    }

    public int insert(Query query) throws DAOException
    {
	PreparedStatement ps = null;
	int pos = 1;

	try
	{
	    ps = getConn().prepareStatement(DBUtil.insert(tableName, pkColumns, stdColumns), Statement.RETURN_GENERATED_KEYS);
	    pos = bindPrimaryKey(ps, query, pos);
	    bindStdColumns(ps, query, pos);

	    int rowCount = ps.executeUpdate();

	    if(rowCount != 1)
	    {
		throw new DAOException("Error inserting " + query.getClass() + " in " + tableName + ", affected rows = " + rowCount);
	    }

	    ResultSet rs = ps.getGeneratedKeys();
	    if(!rs.next())
		throw new DAOException("database error: no id generated");
	    query.setQueryId(rs.getInt(1));

	    return rowCount;
	}
	catch(SQLException e)
	{
	    throw new DAOException(e);
	}
	finally
	{
	    DBUtil.close(ps, null);
	}
    }

    public int delete(Query obj) throws DAOException
    {
	PreparedStatement ps = null;

	try
	{
	    ps = getConn().prepareStatement(DBUtil.delete(tableName, pkColumns));
	    bindPrimaryKey(ps, obj, 1);

	    int rowCount = ps.executeUpdate();

	    if(rowCount != 1)
	    {
		throw new DAOException("Error deleting " + obj.getClass() + " in " + tableName + ", affected rows = " + rowCount);
	    }

	    return rowCount;
	}
	catch(SQLException e)
	{
	    throw new DAOException(e);
	}
	finally
	{
	    DBUtil.close(ps, null);
	}
    }

    public List getByResults(int results) throws DAOException
    {
	PreparedStatement ps = null;
	ResultSet rs = null;
	List ret = new ArrayList();

	try
	{
	    ps = getConn().prepareStatement(DBUtil.select(tableName, allColumns, Arrays.asList(new String[] { "results" })));
	    DBUtil.bind(ps, 1, results);
	    rs = ps.executeQuery();

	    while(rs.next())
		ret.add(fromResultSet(rs));
	}
	catch(SQLException e)
	{
	    throw new DAOException(e);
	}
	finally
	{
	    DBUtil.close(ps, rs);
	}

	return ret;
    }

    /*
        public List<Query> getByFolder(String folder) throws DAOException
        {
    	PreparedStatement ps = null;
    	ResultSet rs = null;
    	List<Query> ret = new ArrayList<Query>();
    
    	try
    	{
    	    ps = getConn().prepareStatement(DBUtil.select(tableName, allColumns, Arrays.asList(new String[] { "folder" })));
    	    DBUtil.bind(ps, 1, folder);
    
    	    rs = ps.executeQuery();
    
    	    while(rs.next())
    		ret.add(fromResultSet(rs));
    	}
    	catch(SQLException e)
    	{
    	    throw new DAOException(e);
    	}
    	finally
    	{
    	    DBUtil.close(ps, rs);
    	}
    
    	return ret;
        }
    */
    public List<Query> getByTimestamp(Date timestamp) throws DAOException
    {
	PreparedStatement ps = null;
	ResultSet rs = null;
	List<Query> ret = new ArrayList<Query>();

	try
	{
	    if(null == timestamp)
	    {
		ps = getConn().prepareStatement(DBUtil.selectNull(tableName, allColumns, Arrays.asList(new String[] { "timestamp" })));
	    }
	    else
	    {
		ps = getConn().prepareStatement(DBUtil.select(tableName, allColumns, Arrays.asList(new String[] { "timestamp" })));
		DBUtil.bind(ps, 1, timestamp);
	    }

	    rs = ps.executeQuery();

	    while(rs.next())
		ret.add(fromResultSet(rs));
	}
	catch(SQLException e)
	{
	    throw new DAOException(e);
	}
	finally
	{
	    DBUtil.close(ps, rs);
	}

	return ret;
    }

    public List getByType(String type) throws DAOException
    {
	PreparedStatement ps = null;
	ResultSet rs = null;
	List ret = new ArrayList();

	try
	{
	    if(null == type)
	    {
		ps = getConn().prepareStatement(DBUtil.selectNull(tableName, allColumns, Arrays.asList(new String[] { "type" })));
	    }
	    else
	    {
		ps = getConn().prepareStatement(DBUtil.select(tableName, allColumns, Arrays.asList(new String[] { "type" })));
		DBUtil.bind(ps, 1, type);
	    }

	    rs = ps.executeQuery();

	    while(rs.next())
		ret.add(fromResultSet(rs));
	}
	catch(SQLException e)
	{
	    throw new DAOException(e);
	}
	finally
	{
	    DBUtil.close(ps, rs);
	}

	return ret;
    }

    //
    // helpers
    //
    protected int bindPrimaryKey(PreparedStatement ps, Query obj, int pos) throws SQLException
    {
	DBUtil.bind(ps, pos++, obj.getQueryId());

	return pos;
    }

    protected int bindStdColumns(PreparedStatement ps, Query obj, int pos) throws SQLException
    {
	DBUtil.bind(ps, pos++, obj.getQueryString());
	DBUtil.bind(ps, pos++, obj.getEstimatedResultCount());
	DBUtil.bind(ps, pos++, obj.getLoadedResultCount());
	DBUtil.bind(ps, pos++, obj.getRequestedResultCount());
	DBUtil.bind(ps, pos++, obj.getTimestamp());
	DBUtil.bind(ps, pos++, obj.getType());
	DBUtil.bind(ps, pos++, obj.getMarket());
	DBUtil.bind(ps, pos++, Boolean.toString(obj.isDisableQueryAlterations()));

	return pos;
    }

    protected Query fromResultSet(ResultSet rs) throws SQLException
    {
	Query obj = new Query();

	obj.setQueryId(DBUtil.getInt(rs, "query_id"));
	obj.setQueryString(DBUtil.getString(rs, "query_string"));
	obj.setEstimatedResultCount(DBUtil.getInt(rs, "results"));
	obj.setLoadedResultCount(DBUtil.getInt(rs, "loaded_results"));
	obj.setRequestedResultCount(DBUtil.getInt(rs, "requested_results"));
	obj.setTimestamp(DBUtil.getDate(rs, "timestamp"));
	obj.setType(DBUtil.getString(rs, "type"));
	obj.setMarket(DBUtil.getString(rs, "market"));
	obj.setDisableQueryAlterations(DBUtil.getBoolean(rs, "disable_query_alteration"));
	return obj;
    }

    protected Connection getConn()
    {
	return (conn == null) ? DBUtil.getConnection() : conn;
    }
}
