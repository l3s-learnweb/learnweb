<ui:composition template="/templates/main/main.xhtml" 
	xmlns:ui="http://java.sun.com/jsf/facelets" 
	xmlns:h="http://java.sun.com/jsf/html" 
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:p="http://primefaces.org/ui"
	xmlns:c="http://java.sun.com/jsp/jstl/core"
	xmlns:pt="http://xmlns.jcp.org/jsf/passthrough"
	lang="#{userBean.localeCode}">

	<ui:define name="metadata">
		<f:metadata>
			<f:event type="preRenderView" listener="#{newSearchHistoryBean.preRenderView}" />
		</f:metadata>
	</ui:define>

	<ui:param name="pageTitle" value="Search History" />
	<ui:param name="loginRequired" value="true" />
	
	<ui:define name="center_layout">
		<!-- Include your demo2.xhtml code inside this tag -->
		<!-- <ui:include src="demo4.xhtml"></ui:include> -->
		<!-- <h4>#{newSearchHistoryBean.title}</h4> -->
	
		<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
		<!-- <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css"/> -->
		<h:outputStylesheet library="search-history" name="queryPath.css"  />
		
		<script type="text/javascript" src="#{request.contextPath}/resources/search-history/jsnetworkx.js"></script>
		<script type="text/javascript" src="#{request.contextPath}/resources/search-history/d3-tip.js"></script>
		
		<h:form>
			<p:remoteCommand name="updateKG" actionListener="#{newSearchHistoryBean.actionUpdateKGData}" update="updateGraph" oncomplete="draw()"/>
		</h:form>
		<div class="history-container">
			<div class="session-timeline">
				<div>
					<div style="display:inline-block;"><h3>Sessions</h3></div>
					<span class="hideIcon">
						<svg x="0px" y="0px" width="14px" height="14px" viewBox="0 0 10 10" focusable="false">
							<polygon class="a-s-fa-Ha-pa" fill="#000000" points="10,1.01 8.99,0 5,3.99 1.01,0 0,1.01 3.99,5 0,8.99 1.01,10 5,6.01 8.99,10 10,8.99 6.01,5 ">
							</polygon>
						</svg>
					</span>
				</div>
				<div class="box">
	            <ul id="first-list">
	            	<ui:repeat var="session1" value="#{newSearchHistoryBean.sessions}">
	                <li>
	                    <span></span>
	                    <h:panelGroup layout="block" style="cursor:pointer" class="session_block" pt:data-sessionId="#{session1.sessionId}">
		                    <div class="title"></div>
		                    <div class="info">
		                    	<ui:repeat var="query" value="#{session1.queries}">
		                    		<span class="source_#{query.service}">#{query.query}</span>
		                    	</ui:repeat>
		                    	
		                    </div>
		                    <div class="time">
		                        <span>#{newSearchHistoryBean.formatDate(session1.startTimestamp, userBean.locale)}</span>
		                       	<span>#{newSearchHistoryBean.formatTime(session1.startTimestamp, userBean.locale)}</span>
		                        <span>#{newSearchHistoryBean.formatTime(session1.endTimestamp, userBean.locale)}</span>
		                    </div>
	                    </h:panelGroup>
	                </li>
	                </ui:repeat>
	                <li>
	                    <span></span>
	                    <div class="title"></div>
	                    <div class="info"><span style="background-image: url('#{resource['icon:services/bing.gif']}');background-size: 16px 16px;background-position: left center;background-repeat: no-repeat;padding-left: 20px;">query1</span> &#8594; query2 &#8594; query3 &#8594; query4 &#8594; query5</div>
	                    <div class="time">
	                        <span>JUN, 29<sup>th</sup> 2017</span>
	                        <span>10:00 AM</span>
	                        <span>11:36 AM</span>
	                    </div>
	                </li>
				</ul>
				</div>
			
			</div>

			<div class="knowledge-graph">
				<div id="canvas" class="w3-container" style="height:500px; margin:0 auto;">
					<h:panelGroup id="updateGraph">
					<button onclick="drawQueryPath()" id="query_path_button">Query Path</button>
						<div id="queries" style="display:none">
							<ui:repeat var="query" value="#{newSearchHistoryBean.queries}">
			                    #{query},
			                </ui:repeat>
		                </div>
		                <div id="entities" style="display:none">
							<ui:repeat var="entity" value="#{newSearchHistoryBean.entities}">
			                    #{entity},
			                </ui:repeat>
		                </div>
		                <div id="related" style="display:none">
							<ui:repeat var="relatedEntities" value="#{newSearchHistoryBean.related}">
								<ui:repeat var="relatedEntity" value="#{relatedEntities}">
			                    	#{relatedEntity},
			                    </ui:repeat>;
			                </ui:repeat>
		                </div>
		                <div id="edges" style="display:none">
							<ui:repeat var="edge" value="#{newSearchHistoryBean.edges}">
			                    #{edge[0]},#{edge[1]};
			                </ui:repeat>
		                </div>
					</h:panelGroup>
				</div>
			</div>
			<div class="snippet-viewer">Query Snippets</div>
		</div>
		
		<script>
		$(document).ready(function(){
			$('.hideIcon').on('click',function(){
					$('.session-timeline').hide();
					$('.knowledge-graph').css('grid-column','1 / -1');
				});
			
			$('.session_block').on('click', function(e){
				var element = e.currentTarget;
				var sessionId = element.getAttribute("data-sessionid"); 
				//console.log(sessionId);
				$('.box ul li').css("background","#489a83");
				$(element).parent().css("background","darkgrey");
				updateKG([
					{name: "session-id", value: sessionId }
				]);
			});
			
			$('#query_path_button').hide();
		});
		
		function draw()
		{
			var i, j;
			var G = new jsnx.Graph();
			var queryStrs = document.getElementById("queries").innerHTML.split(",");
		    var queries = [];
		    for (i = 0; i &lt; queryStrs.length-1; i++)
		    {
		    	queries.push(queryStrs[i].trim());
		    }
		    var len_1 = queries.length;
		    console.log(queries);
		    console.log(len_1);
		    
		    var entityStrs = document.getElementById("entities").innerHTML.split(",");
		    var entities = [];
		    for (i = 0; i &lt; entityStrs.length-1; i++)
		    {
		    	entities.push(entityStrs[i].trim());
		    }
		    var len_2 = entities.length;
		    console.log(entities);
		    console.log(len_2);
		    
		    var relatedStrs = document.getElementById("related").innerHTML.split(";");
		    var related = [];
		    for (i = 0; i &lt; relatedStrs.length-1; i++)
		    {
		    	var relatedStr = relatedStrs[i].trim().split(",");
		    	var relatedArr = [];
		    	for (j = 0; j &lt; relatedStr.length-1; j++)
		    	{
		    		relatedArr.push(relatedStr[j].trim());
		    	}
		    	related.push(relatedArr);
		    }
		    var len_3 = related.length;
		    console.log(related);
		    
		    var edgeStrs = document.getElementById("edges").innerHTML.split(";");
		    var edges = [];
		    for (i = 0; i &lt; edgeStrs.length-1; i++)
		    {
		    	var edgeStr = edgeStrs[i].trim().split(",");
		    	edges.push([edgeStr[0].trim(), edgeStr[1].trim()]);
		    }
		    var len_4 = edges.length;
		    console.log(edges);
		    
			//add nodesd
			//entities
			for(i=0; i &lt; len_2; i++){
				G.addNode(entities[i],{count:10, color: '#d0e8e5'});
			}
			
			//queries
			for(i=0; i &lt; len_1; i++){
				G.addNode(queries[i], {count:15, color: '#489a83'});
			}
			
			//add edges
			//relationships
			for(i=0; i &lt; len_4; i++){
				var nodepairs = edges[i];
				console.log(nodepairs[0] + ", " + nodepairs[1]);
				G.addEdge(nodepairs[0],nodepairs[1], {color:'#d2dde0'});
			}
			
			//edges between queries and entities
			for(i=0; i &lt; len_3; i++){
				var reen = related[i];
				for(j=0; j &lt; reen.length; j++){
					G.addEdge(queries[i],reen[j], {color:'#99c2ff'});
				}
			}
			//step edges between query nodes
			for(i=0; i &lt; len_1; i++){
				G.addEdge(queries[i], queries[i+1], {color: "black"});
			}
			
			jsnx.draw(G,{
				element: "#canvas",
				layoutAttr:{
					charge:-200,
					linkDistance:150
				},
				withLabels: true,
				nodeAttr:{
					r: function(d){
						return d.data.count;
					}
				},
				nodeStyle:{
					fill:function(d){
						return d.data.color;
					},
					stroke: 'none'
				},
				labelStyle:{
					fill: 'black',
					'font-size': 8
				},
				edgeStyle: {
					fill:function(d){
						return d.data.color;
					}
				},
				stickyDrag: true
			});
		}
		
		//draw query path
		var tip = d3.tip()
		  .attr('class', 'd3-tip')
		  .offset([-10, 0])
		  //.html("test");
		  .html(function(d) {
			var string1 = "<ul>";
			
			for(var i=0; i &lt; d.data.entities.length; i++){
				string1 += "<li>" + d.data.entities[i] + "</li>";
			}
			string1 += "</ul>";
			console.log(string1);
		    return string1;
		  });
		//d3.select("body").call(tip);
		
		function drawQueryPath(){
			var i;
			var G = new jsnx.DiGraph();
			var queryStrs = document.getElementById("queries").innerHTML.split(",");
		    var queArray = [];
		    for (i = 0; i &lt; queryStrs.length-1; i++)
		    {
		    	queArray.push(queryStrs[i].trim());
		    }
		    var len = queArray.length;
		    console.log(queArray);
		    console.log(len);
			
		    var relatedStrs = document.getElementById("related").innerHTML.split(";");
		    var related = [];
		    for (i = 0; i &lt; relatedStrs.length-1; i++)
		    {
		    	var relatedStr = relatedStrs[i].trim().split(",");
		    	var relatedArr = [];
		    	for (j = 0; j &lt; relatedStr.length-1; j++)
		    	{
		    		relatedArr.push(relatedStr[j].trim());
		    	}
		    	related.push(relatedArr);
		    }
		    var len_3 = related.length;
		    console.log(related);
		    
			//addnode		
			for(i=0; i &lt; len; i++){
				//var nodeA = {toString: function(){return queArray[i]}}
				//console.log(enArray[i]);
				//console.log(JSON.parse(enArray[i].entities));
				G.addNode(queArray[i], {count:20, color: '#489a83', entities: related[i]});
			}
			//addedge
			for(i=0; i &lt; len-1; i++){
				G.addEdge(queArray[i], queArray[i+1]);
			}
		
			jsnx.draw(G,{
				element: "#canvas",
				layoutAttr:{
					charge:-200,
					linkDistance:150
				},
				withLabels: true,
				nodeAttr:{
					r: function(d){
						return d.data.count;
					}
				},
				nodeStyle:{
					fill:function(d){
						return d.data.color;
					},
					stroke: 'none'
				},
				labelStyle:{
					fill: 'black'
				},
				stickyDrag: true
			});
			
			d3.select('svg').call(tip);
			d3.selectAll('.node').on('dblclick',tip.show);
			d3.selectAll('.node').on('mouseout', tip.hide);
			
		}
		</script>

	</ui:define>
	
</ui:composition>